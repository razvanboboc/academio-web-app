// <auto-generated />
using System;
using Influencers.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Influencers.Models.Migrations
{
    [DbContext(typeof(InfluencersContext))]
    [Migration("20210402141901_Migration10")]
    partial class Migration10
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Influencers.Models.Article", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddedTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("AuthorId")
                        .HasColumnName("Author_Id")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageSource")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int>("Votes")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Article");
                });

            modelBuilder.Entity("Influencers.Models.ArticleTags", b =>
                {
                    b.Property<int>("ArticleId")
                        .HasColumnName("Article_Id")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnName("Tag_Id")
                        .HasColumnType("int");

                    b.HasKey("ArticleId", "TagId");

                    b.HasIndex("TagId");

                    b.HasIndex("ArticleId", "TagId")
                        .IsUnique()
                        .HasName("UQ__ArticleT__7D0083163AC3ED2A");

                    b.ToTable("ArticleTags");
                });

            modelBuilder.Entity("Influencers.Models.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("ImageSource")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nickname")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int?>("Votes")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Author");
                });

            modelBuilder.Entity("Influencers.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AddedTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("ArticleId")
                        .HasColumnName("Article_Id")
                        .HasColumnType("int");

                    b.Property<int?>("AuthorId")
                        .HasColumnName("Author_Id")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Votes")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("AuthorId");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("Influencers.Models.Tags", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("Influencers.Models.Article", b =>
                {
                    b.HasOne("Influencers.Models.Author", "Author")
                        .WithMany("Article")
                        .HasForeignKey("AuthorId")
                        .HasConstraintName("FK__Article__Author___398D8EEE");
                });

            modelBuilder.Entity("Influencers.Models.ArticleTags", b =>
                {
                    b.HasOne("Influencers.Models.Article", "Article")
                        .WithMany("Tags")
                        .HasForeignKey("ArticleId")
                        .HasConstraintName("FK__ArticleTa__Artic__3E52440B")
                        .IsRequired();

                    b.HasOne("Influencers.Models.Tags", "Tag")
                        .WithMany("Articles")
                        .HasForeignKey("TagId")
                        .HasConstraintName("FK__ArticleTa__Tag_I__3F466844")
                        .IsRequired();
                });

            modelBuilder.Entity("Influencers.Models.Comment", b =>
                {
                    b.HasOne("Influencers.Models.Article", "Article")
                        .WithMany("Comment")
                        .HasForeignKey("ArticleId")
                        .HasConstraintName("FK__Comment__Article__4D94879B");

                    b.HasOne("Influencers.Models.Author", "Author")
                        .WithMany("Comment")
                        .HasForeignKey("AuthorId")
                        .HasConstraintName("FK__Comment__Author___4CA06362");
                });
#pragma warning restore 612, 618
        }
    }
}
